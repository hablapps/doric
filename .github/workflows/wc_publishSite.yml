name: Reusable - Publish documentation

on:
  workflow_call:
    inputs:
      publish:
        required: true
        type: string
        default: 'yes'

jobs:
  matrix_prep:
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix }}
    steps:
      - uses: actions/checkout@v4.1.1

      - id: set-matrix
        uses: JoshuaTheMiller/conditional-build-matrix@v2.0.1
        with:
          filter: '[?isRelease==`release`]'

  # DOCUMENTATION
  scaladoc_api:
    needs: ["matrix_prep"]
    strategy:
      fail-fast: false
      matrix: ${{fromJson(needs.matrix_prep.outputs.matrix)}}
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4.1.1

      # SETUP & CACHE
      - uses: coursier/cache-action@v6.4.5
        id: coursier-cache
        with:
          ignoreJob: 'true'
          ignoreMatrix: 'true'

      - uses: coursier/setup-action@v1.3.5
        if: steps.coursier-cache.outputs.cache-hit-coursier != 'true'
        with:
          jvm: adopt:8
          apps: sbt scala scalafmt  # https://github.com/coursier/apps

        # BUILD SCALADOCS (API)
      - name: Build the scaladocs üíª
        run: sbt -DsparkVersion=${{ matrix.spark }} +core/doc
        shell: bash

        # UPLOAD DOCS
      - name: Prepare scaladocs
        if: inputs.publish == 'yes'
        id: prepare_scaladocs
        run: |
          SCALA_VERSIONS=$(ls -d core/target/scala-*/)
          for scala_path in ${SCALA_VERSIONS}; do
            scala_version=$(basename ${scala_path})
            mkdir --parents --verbose spark-${{ matrix.spark }}/${scala_version}/
            mv ${scala_path}/api/* spark-${{ matrix.spark }}/${scala_version}/
          done
        shell: bash

      - name: Upload docs ‚¨ÜÔ∏è
        if: steps.prepare_scaladocs.conclusion == 'success'
        uses: actions/upload-artifact@v4.3.1
        with:
          name: "spark-${{ matrix.spark }}"
          path: "spark-${{ matrix.spark }}"
          if-no-files-found: error

        # CLEAN PROJECT BEFORE CACHE
      - name: Cleaning before cache üöØ
        if: ${{ always() }}
        uses: ./.github/actions/clean_cache

  # PUBLISH DOC JOB
  generate_publish_mdoc:
    needs: [ "scaladoc_api" ]
    if: inputs.publish == 'yes'
    runs-on: ubuntu-latest
    steps:

      - uses: actions/checkout@v4.1.1

      # BUILD MDOC, sbt should take the latest version
      - name: Build the microsite üíª
        run: sbt +docs/mdoc
        shell: bash

      # DOWNLOAD DOCS, this will download all the artifacts because no name provided
      - name: Download docs ‚¨áÔ∏è
        uses: actions/download-artifact@v4.1.4
        with:
          path: "docs/target/mdoc/docs/api/"

      # DEPLOY TO GITHUB PAGES
      - name: Deploy üöÄ
        uses: JamesIves/github-pages-deploy-action@v4.5.0
        with:
          branch: gh-pages # The branch the action should deploy to.
          folder: docs/target/mdoc # The folder the action should deploy.
          token: ${{ secrets.GITHUB_TOKEN }}
